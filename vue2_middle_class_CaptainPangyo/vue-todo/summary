# Babel (https://babeljs.io/)

- 구 버전 브라우저 중에서는 EC6의 기능을 지원하지 않는 브라우저가 있으므로
  transpiling이 필요

- EC6의 문법을 각 브라우저의 호환 가능한 EC5로 변환하는 컴파일러

# const & let : 새로운 변수 선언 방식

- 블록 단위 { }로 변구의 범위가 제한되었음
- const : 한번 선언한 값에 대해서 변경할 수 없음(상수 개념)
- let : 한번 선언한 값에 대해서 다시 선언할 수 없음

# ES5 특징

## 1) 변수의 Scope

- 기존의 자바스크립트(ES5)는 { }에 상관없이 스코프가 설정됨.

## 2) Hoisting

- Hoisting이란 선언한 함수와 변수를 해석기가 가장 상단에 있는 것 처럼 인식한다.
- js 해석기는 코드의 라인 순서와 관계 없이 함수 선언식과 변수를 위한 메모리 공간을 먼저 확보한다.
- 따라서 sunction a() 와 var는 코드의 최상단으로 끌어 올려진 것(hoisted) 처럼 보인다.

# ES6 특징

1. { } 단위로 변수의 범위가 제한됨
2. const로 지정한 값 변경 불가능 (하지만 객체나 배열의 내부는 변경할 수 있다.)

# Arrow Function : 화살표 함수

- 함수를 정의할 때 function 이라는 키워드를 사용하지 않고 '=>'로 대체
- 흔히 사용하는 콜백 함수의 문법을 간결화

# Enhanced Object Literals : 향상된 객체 리터럴

- 객체의 속성을 메서드로 사용할 때 function 예약어를 생략하고 생성 가능
- 객체의 속성명과 값 명이 동일할 때 축약이 가능하다.

# Modules : 자바스크립트 모듈화 방법

- 자바스크립트 모듈 로더 라이브러리(AMD, Commons JS)기능을 js 언어 자체에서 지원
- 호출되기 전까지는 코드 실행과 동작을 하지 않는 특징이 있음.
- 재사용성이 뛰어난 기능들을 묶어서 필요할 때 마다 가져다 쓸 수 있도록 해줌.

# Vuex란?

- 무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
- React의 Flux 패턴에서 기인함
- Vue.js 중고급 개발자로 성장하기 위한 필수 관문

## Vuex가 필요한 이유?

- 복잡한 애플리케이션에서 컴포넌트의 개수가 많아지면 컴포넌트 간에 데이터 전달이 어려워진다.
- 어디서 이벤트를 보냈는지 혹은 어디서 이벤트를 받았는지 알기 어렵다. (컴포넌트 간 데이터 전달이 명시적이지 않음)

## Vuex로 해결할 수 있는 문제

- MVC 패턴에서 발생하는 구조적 오류
- 컴포넌트 간 데이터 전달 명시
- 여러 개의 컴포넌트에서 같은 데이터를 업데이트 할 때 동기화 문제

## Vuex 컨셉

- State : 컴포넌트 간에 공유하는 데이터 => data()
- View : 데이터를 표시하는 화면 => template
- Action : 사용자의 입력에 따라 데이터를 변경 => methods

## Vuex 기술 요소

- state : 여러 컴포넌트에 공유되는 데이터 => data
- getters : 연산된 state 값을 접근하는 속성 => computed
- mutations : state 값을 변경하는 이벤트 로직. 메서드. commit()으로 동작. => methods
- actions : 비동기 처리 로직을 선언하는 메서드 asysnc methods

### sate는 왜 직접 변경하지 않고 mutations로 변경할까?

- 여러 개의 컴포넌트에서 state값을 변경하는 경우 어느 컴포넌트에서 해당 state를 변경했는지 추적하기가 어렵다.
- 특정 시점에 어떤 컴포넌트가 state를 접근하여 변경한 건지 확인하기 어렵기 때문이다.
- 따라서, 뷰의 반응성을 거스르지 않게 명시적으로 상태 변화를 수행. 반응성, 디버깅, 테스팅 혜택.

## Vuex 구조

- 컴포넌트 -> 비동기 로직 -> 동기 로직 -> 상태

- 참고자료

1. 자바스크립트 비동기 처리와 콜백 함수
   https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/

2. 자바스크립트 Promise 쉽게 이해하기
   https://joshua1988.github.io/web-development/javascript/promise-for-beginners/

# Flux란?

- MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴 => Undirectional data flow

\*\* Action -> Dispatcher -> Model -> View

1. action : 화면에서 발생하는 이벤트 또는 사용자의 입력
2. dispatcher : 데이터를 변경하는 방법, 메서드
3. model : 화면에 표시할 데이터
4. view : 사용자에게 비춰지는 화면

## Flux 패턴의 단방향 데이터 흐름

- 데이터의 흐름이 여러 갈래로 나뉘지 않고 단방향으로만 처리
